#!/usr/bin/env python3

from sys import argv as av
import math

def print_usage():
	print("USAGE")


def multiply_matrix(matrix, matrix_h):
	result = [(float(matrix_h[0]) * matrix[0][0]) + (float(matrix_h[1]) * matrix[0][1]) + (matrix_h[2] * matrix[0][2]),
			  (float(matrix_h[0]) * matrix[1][0]) + (float(matrix_h[1]) * matrix[1][1]) + (matrix_h[2] * matrix[1][2]),
			  (float(matrix_h[0]) * matrix[2][0]) + (float(matrix_h[1]) * matrix[2][1]) + (matrix_h[2] * matrix[2][2])]

	return (result)

def get_matrix_h(x, y):
	result = [x, y, 1]

	return (result)

def get_translation_matrix(av, i):
	one = float(av[i + 1])
	two = float(av[i + 2])
	matrix = [[1.00,0.00,one],[0.00,1.00,two],[0.00,0.00,1.00]]

	return (matrix)

def get_scalation_matrix(av, i):
	m = float(av[i + 1])
	n = float(av[i + 2])
	matrix = [[m, 0.00, 0.00],[0.00, n, 0.00],[0.00, 0.00, 1]]

	return (matrix)

def get_rotation_matrix(av, i):
	angle = int(av[i + 1])
	matrix = [[(math.cos(angle)), (-1*(math.sin(angle))), 0],
			 [(math.sin(angle)), (math.cos(angle)), 0],
			 [0.00, 0.00, 1.00]]

	return (matrix)

def get_reflection_matrix(av, i):
	angle = float(av[i + 1])
	cos_angle_bytwo = math.cos(2*(math.radians(angle)))
	sin_angle_bytwo = math.sin(2*(math.radians(angle)))

	matrix = [[cos_angle_bytwo, sin_angle_bytwo, 0.00],
			  [sin_angle_bytwo, (-1*(cos_angle_bytwo)), 0.00],
			  [0.00, 0.00, 1.00]]

	return (matrix)

def print_result(av, i, matrix, result):
	x = float(av[1])
	y = float(av[2])
	counter_one = 0
	counter_two = 0
	if len(av) == 6 or len(av) == 5: 
		while counter_one <= 2:
			while counter_two <= 2:
				print('%.2f' %matrix[counter_one][counter_two], end = '')
				print('\t', end = '')
				counter_two += 1
			print("")
			counter_two = 0
			counter_one += 1
		print('(' + '%.2f' %x + ', ' + '%.2f' %y + ')', end = '')
		print(" => ", end = '')
		print('(' + '%.2f' %result[0] + ', ' + '%.2f' %result[1] + ')')


def do_scalation(av, i):
	matrix = get_scalation_matrix(av, i)
	matrix_h = get_matrix_h(float(av[1]), float(av[2]))

	result = multiply_matrix(matrix, matrix_h)

	print ("Scaling by factors (" + av[i + 1] + ", " + av[i + 2] + ')')
	print_result(av, i , matrix, result)

	return (matrix)

def do_translation(av, i):
	matrix = get_translation_matrix(av,i)
	matrix_h = get_matrix_h(float(av[1]), float(av[2]))

	result = multiply_matrix(matrix, matrix_h)

	print ("Translation along vector (" + av[i + 1] + ", " + av[i + 2] + ')')
	print_result(av, i, matrix, result)

	return (matrix)

def do_rotation(av, i):
	matrix = get_rotation_matrix(av, i)
	matrix_h = get_matrix_h(float(av[1]), float(av[2]))

	result = multiply_matrix(matrix, matrix_h)

	print ("Rotation by a " + av[i + 1] + " degree angle")
	print_result(av, i, matrix, result)

	return (matrix)

def do_reflection(av, i):
	matrix = get_reflection_matrix(av, i)
	matrix_h = get_matrix_h(float(av[1]), float(av[2]))

	result = multiply_matrix(matrix, matrix_h)

	print ("Refelctoin over an axis with an inclination angle of " + av[i + 1] + " degrees" )
	print_result(av, i, matrix, result)

	return (matrix)

def main(av):
	i = 3

	try:
		if av[1] == "-h" and len(av) == 2:
			print_usage()			
			exit (0)
		else:
			while i <= (len(av) - 1):
				if av[i] == "-t":
					do_translation(av, i)
					i += 3
				elif av[i] == "-z":
					do_scalation(av, i)
					i += 3
				elif av[i] == "-r":
					do_rotation(av, i)
					i += 2
				elif av[i] == "-s":
					do_reflection(av, i)
					i += 2
				else:
					raise Exception
		if len(av) <= 3:
			raise Exception
	except Exception:
		print ("Error, -h for usage")
		exit (84)
	exit (0)


if __name__ == "__main__":
    main(av)
